__author__ = 'hartelt'
"""
This scripts imports tiff files, as generated for example by Terra and the PEEM Camera Software. The methods defined
here will read those files and return the data as a DataSet instances. 3D tiff stacks shall be supported.
"""

import snomtools.data.datasets
import os
import numpy
import tifffile

def search_tag(tif,tag_id):
	"""
	Searches for a tag in all pages of a tiff file and returns the first match as
	:param tif: An open TiffFile. See tifffile.TiffFile.
	:param tag_id: String: The ID of the tag to search for.
	:return: The tag, object, instance of tifffile.TiffTag.
	"""
	for page in tif:
		for tag in page.tags.values():
			if tag.name == tag_id:
				return tag
	print("WARNING: Tiff tag not found.")
	return None

def peem_dld_read(filepath):
	"""
	Reads a tif file as generated by Terra when using the DLD. Therefore, the 3D tif dimensions are interpreted as
	time-channel, x and y, with the first two time channels being the sum and the error image, which will be ignored.

	:param filepath: String: The (absolute or relative) path of input file.

	:return: The dataset instance generated from the tif file.
	"""
	# Translate input path to absolute path:
	filepath = os.path.abspath(filepath)
	filebase = os.path.basename(filepath)

	# Read tif file to numpy array. Axes will be (timechannel, x, y):
	infile = tifffile.TiffFile(filepath)
	indata = infile.asarray()

	# Read time binning metadata from tags:
	roi_and_bin_id = "41010" # as defined by Christian Schneider #define TIFFTAG_ROI_AND_BIN 41010
	tag = search_tag(infile,roi_and_bin_id)
	#roi_and_bin_list = tag.value
	T, St, Tbin = int(tag.value[2]), int(tag.value[5]), int(tag.value[8])
	infile.close()

	# Remove sum and error image:
	realdata = numpy.delete(indata,[0,1],axis=0)

	# Initialize data for dataset:
	dataarray = snomtools.data.datasets.DataArray(realdata,unit='count',label='counts',plotlabel='Counts')
	if tag:
		assert (realdata.shape[0] == St / Tbin), "ERROR: Tifffile metadata time binning does not fit to data size."
		uplim = T+(St/Tbin)*Tbin # upper limit calculation because of Terras strange floordiv behaviour.
		taxis = snomtools.data.datasets.Axis(numpy.arange(T,uplim,Tbin),label='channel',plotlabel='Time Channel')
	else:
		taxis = snomtools.data.datasets.Axis(numpy.arange(0,realdata.shape[0]),label='channel',plotlabel='Time Channel')
	xaxis = snomtools.data.datasets.Axis(numpy.arange(0,realdata.shape[1]),unit='pixel',label='x',plotlabel='x')
	yaxis = snomtools.data.datasets.Axis(numpy.arange(0,realdata.shape[2]),unit='pixel',label='y',plotlabel='y')

	# Return dataset:
	return snomtools.data.datasets.DataSet(label=filebase,datafields=[dataarray],axes=[taxis,xaxis,yaxis])


if False:  # Just for testing...
	filename = "12-1h19m-D1,4-G05-2O1R-530nm-FoV7um.tif"
	testdata = peem_dld_read(filename)
	outname = filename.replace('.tif','.hdf5')
	testdata.saveh5(outname)
	print('done.')